package testutils_test

import (
	"regexp"
	"strings"
	"testing"

	"github.com/sirkon/go-format"
	"github.com/stretchr/testify/assert"
	"github.com/tsanton/dbt-unit-test-fusionizer/testutils"
)

func Test_StringerMerger_NoMerge(t *testing.T) {
	content := strings.TrimSpace(`
{% call dbt_unit_testing.expect() %}
{% endcall %}
`)

	exp := strings.TrimSpace(`
/*###############################################
### Do NOT modify: generated by datasourcerer ###
###############################################*/
{% call dbt_unit_testing.expect() %}
{% endcall %}
`)

	res := testutils.Merge(t, content, format.Values{})

	assert.Equal(t, exp, res)

}

func Test_StringerMerger_Vanilla(t *testing.T) {
	content := strings.TrimSpace(`
{% call dbt_unit_testing.expect() %}
{% endcall %}
`)

	opt := testutils.MergeOptions{
		LineNumber: 0,
		Content:    "Hello world!",
	}

	exp := strings.TrimSpace(`
/*###############################################
### Do NOT modify: generated by datasourcerer ###
###############################################*/
{% call dbt_unit_testing.expect() %}
Hello world!
{% endcall %}
`)

	res := testutils.Merge(t, content, format.Values{}, opt)
	// fmt.Println(res)
	assert.Equal(t, exp, res)

}

func Test_StringerMerger_Regexp(t *testing.T) {
	content := strings.TrimSpace(`
{% call dbt_unit_testing.expect() %}{% endcall %}
`)

	opt := testutils.MergeOptions{
		LineNumber: 0,
		Content:    "Hello world!",
		Regex:      regexp.MustCompile(regexp.QuoteMeta("expect() %}")),
	}

	exp := strings.TrimSpace(`
/*###############################################
### Do NOT modify: generated by datasourcerer ###
###############################################*/
{% call dbt_unit_testing.expect() %}
Hello world!
{% endcall %}
`)

	res := testutils.Merge(t, content, format.Values{}, opt)
	assert.Equal(t, exp, res)
}

func Test_StringerMerger_TwoDataSources(t *testing.T) {
	content := strings.TrimSpace(`
{% call dbt_unit_testing.expect() %}
{% endcall %}

{% call dbt_unit_testing.expect() %}
{% endcall %}
`)

	opt1 := testutils.MergeOptions{
		LineNumber: 0,
		Content:    "Hello world!",
	}

	opt2 := testutils.MergeOptions{
		LineNumber: 3,
		Content:    "Hello new world!",
	}

	exp := strings.TrimSpace(`
/*###############################################
### Do NOT modify: generated by datasourcerer ###
###############################################*/
{% call dbt_unit_testing.expect() %}
Hello world!
{% endcall %}

{% call dbt_unit_testing.expect() %}
Hello new world!
{% endcall %}
`)

	res := testutils.Merge(t, content, format.Values{}, opt1, opt2)

	assert.Equal(t, exp, res)

}
