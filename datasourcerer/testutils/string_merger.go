package testutils

import (
	"regexp"
	"strings"
	"testing"

	"github.com/sirkon/go-format"
)

type MergeOptions struct {
	LineNumber int //From index 0
	Regex      *regexp.Regexp
	Content    string
}

func Merge(t *testing.T, target string, formats format.Values, options ...MergeOptions) string {
	prefix := strings.TrimSpace(`
/*###############################################
### Do NOT modify: generated by datasourcerer ###
###############################################*/
`)
	if len(options) == 0 {
		// If no merge options are provided, return the original content with the prefix.
		return prefix + "\n" + target
	}

	lines := strings.Split(target, "\n")
	result := make([]string, 0, len(lines))

	for idx, line := range lines {
		appendedContent := false // to track if we've appended content for a given line already

		for _, opt := range options {
			if idx == opt.LineNumber {
				if opt.Regex == nil {
					result = append(result, line)        // First, add the original line.
					result = append(result, opt.Content) // Then, append the content.
					appendedContent = true
				} else {
					loc := opt.Regex.FindStringIndex(line)
					if loc == nil {
						t.Errorf("Regex %s did not match line %s", opt.Regex, line)
						break
					} else {
						// Break the line at the matched part
						beforeMatch := line[:loc[1]]
						afterMatch := line[loc[1]:]

						// // Calculate leading whitespace for consistent indentation
						leadingWhitespace := beforeMatch[:len(beforeMatch)-len(strings.TrimLeft(beforeMatch, " \t"))]

						// Append the line before the match, then append the content, and finally the rest of the line
						result = append(result, beforeMatch)
						result = append(result, opt.Content)
						result = append(result, leadingWhitespace+afterMatch)

						appendedContent = true
					}
				}
			}
		}

		// If the content hasn't been appended for this line, append the line.
		if !appendedContent {
			result = append(result, line)
		}
	}
	if len(formats) > 0 {
		return format.Formatm(prefix+"\n"+strings.Join(result, "\n"), formats)
	} else {
		return prefix + "\n" + strings.Join(result, "\n")
	}

}
